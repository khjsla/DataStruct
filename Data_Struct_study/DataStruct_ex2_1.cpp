//#include <iostream>
//using namespace std;
//
///* 포인터에 대한 예시.
//   포인터는 주소값과 + 자료형을 저장합니다. -> 따라서 포인터 사용시, 형식도 신경써야합니다. 
//   포인터의 크기는 항상 [ 4 byte ] 입니다.
//   포인터를 한번에 많이 선언하는 것은 안됩니다. 일반변수와 동시에 선언하는 것도 안됩니다. 
//   임의의 주소값(0xff7c등,,)을 대입하는 것도 안됩니다.
//   *를 뗀 이름 자체만은 그 포인터가 가리키는 주소값을 나타냅니다
//   *가 붙어있는 포인터는 그 포인터가 가리키는 주소칸 안에 있는 데이터를 나타냅니다
//*/
//
//int main() {
//	int a = 10;
//	int *ptr1 = &a;
//	int *ptr2 = ptr1;
//
//	cout << "a=" << a << "  *ptr1=" << *ptr1 << "  *ptr2=" << *ptr2 << endl;
//
//	a++; //변수를 통한 직접적인 접근방법
//	cout << "a=" << a << "  *ptr1=" << *ptr1 << "  *ptr2=" << *ptr2 << endl;
//	//변수의 값이 변했으니, 이 변수를 가리키고 있는 포인터들의 출력값도 똑같이 달라집니다.
//
//	(*ptr1)++; //포인터를 통한 직접적인 접근방법
//	cout << "a=" << a << "  *ptr1=" << *ptr1 << "  *ptr2=" << *ptr2 << endl;
//	//ptr1 이면 몰라도, *ptr1은 a그자체를 의미합니다.
//	//변수의 값이 변했으니, 이 변수를 가리키고 있는 포인터들의 출력값도 똑같이 달라집니다.
//
//	(*ptr2)++; //포인터를 통한 간접적인 접근방법
//	cout << "a=" << a << "  *ptr1=" << *ptr1 << "  *ptr2=" << *ptr2 << endl;
//	//*ptr2 는 ptr1의 [ 주소가 가리키고 있는 " 데이터 " ] 와 같은의미이고, 이는 a를 의미합니다.
//	//변수의 값이 변했으니, 이 변수를 가리키고 있는 포인터들의 출력값도 똑같이 달라집니다.
//
//	return 0;
//}